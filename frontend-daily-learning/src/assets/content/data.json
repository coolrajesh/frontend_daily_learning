[
  {
    "day": 1,
    "sections": [
      {
        "title": "HTML",
        "topic": "HTML Boilerplate & Semantic Tags",
        "summary": "Understand the basic HTML5 structure and semantic elements.",
        "solution": "### üöÄ HTML5 Boilerplate\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Day 1 Learning</title>\n</head>\n<body>\n  <header><h1>Welcome</h1></header>\n  <main><p>Main content</p></main>\n  <footer>&copy; 2025</footer>\n</body>\n</html>\n```\n\n### üß© Semantic Elements\n- `<header>`, `<footer>`, `<main>`, `<section>`, `<article>` ‚Äì improve accessibility and SEO.",
        "image": "assets/images/day1/html-semantics.png",
        "interviewQuestions": [
          {
            "question": "What are semantic tags in HTML?",
            "answer": "Semantic tags clearly describe their meaning in a human- and machine-readable way.",
            "showAnswer": false
          },
          {
            "question": "Why is semantic HTML important for accessibility?",
            "answer": "It helps screen readers and improves SEO.",
            "showAnswer": false
          }
        ],
        "challenge": "Build a simple portfolio HTML using semantic elements.",
        "quiz": [
          {
            "question": "Which tag defines the main content area?",
            "options": [
              "<div>",
              "<main>",
              "<body>",
              "<section>"
            ],
            "answer": "<main>"
          }
        ]
      },
      {
        "title": "CSS",
        "topic": "Selectors, Box Model & Flexbox Basics",
        "summary": "Learn how to select elements and structure layouts with Flexbox.",
        "solution": "### üéØ Selectors\n```css\n#id { color: red; }\n.class { font-weight: bold; }\nelement { margin: 0; }\n```\n\n### üì¶ Box Model\n\n### üìê Flexbox Basics\n```css\n.container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n```",
        "image": "assets/images/day1/css-flexbox.png",
        "interviewQuestions": [
          {
            "question": "What is the default box-sizing in CSS?",
            "answer": "content-box",
            "showAnswer": false
          },
          {
            "question": "How does flex-grow differ from flex-basis?",
            "answer": "flex-grow defines how much a flex item can grow, while flex-basis defines the initial size.",
            "showAnswer": false
          }
        ],
        "challenge": "Recreate a navbar using flexbox with space-between items.",
        "quiz": [
          {
            "question": "Which property sets horizontal spacing in Flexbox?",
            "options": [
              "align-items",
              "justify-content",
              "flex-direction"
            ],
            "answer": "justify-content"
          }
        ]
      },
      {
        "title": "JavaScript",
        "topic": "Variable Declarations (var, let, const)",
        "summary": "Learn the differences between var, let, and const with scope behavior.",
        "solution": "### üî¢ Variable Declaration\n```js\nvar a = 10;\nlet b = 20;\nconst c = 30;\n```\n- `var` ‚Üí function-scoped, hoisted\n- `let` ‚Üí block-scoped\n- `const` ‚Üí block-scoped + constant reference\n\n### üîÅ Quick Tip\n```js\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 100);\n} // Prints 3, 3, 3 due to var\n```",
        "image": "assets/images/day1/js-var-let-const.png",
        "interviewQuestions": [
          {
            "question": "Explain hoisting in JavaScript.",
            "answer": "Hoisting moves declarations to the top of the scope during compilation.",
            "showAnswer": false
          },
          {
            "question": "Which is preferred for loop counters and why?",
            "answer": "Use 'let' for loop counters to avoid closure issues.",
            "showAnswer": false
          }
        ],
        "challenge": "Write a timer loop that correctly prints 0 to 4 using let.",
        "quiz": [
          {
            "question": "Which is block scoped?",
            "options": [
              "var",
              "let",
              "none"
            ],
            "answer": "let"
          }
        ]
      },
      {
        "title": "TypeScript",
        "topic": "Basic Types & Interfaces",
        "summary": "Understand primitive types and how to define object shapes using interfaces.",
        "solution": "### ‚úÖ Basic Types\n```ts\nlet username: string = 'Raj';\nlet score: number = 100;\nlet isActive: boolean = true;\n```\n\n### ‚úçÔ∏è Interface Example\n```ts\ninterface User {\n  name: string;\n  age: number;\n}\n```",
        "image": "assets/images/ts-interfaces.png",
        "interviewQuestions": [
          {
            "question": "What is the difference between interface and type alias?",
            "answer": "Interfaces are extendable and preferred for object structures. Types are more flexible.",
            "showAnswer": false
          },
          {
            "question": "Can interfaces extend multiple other interfaces?",
            "answer": "Yes, using `extends` keyword.",
            "showAnswer": false
          }
        ],
        "challenge": "Define a Product interface with optional fields and use it.",
        "quiz": [
          {
            "question": "Which keyword defines a contract in TS?",
            "options": [
              "type",
              "interface",
              "class"
            ],
            "answer": "interface"
          }
        ]
      },
      {
        "title": "Angular",
        "topic": "Project Structure Overview",
        "summary": "Overview of Angular CLI file structure and key files.",
        "solution": "### üìÅ Angular CLI Structure\n- `src/app/` ‚Üí Components, services, modules\n- `main.ts` ‚Üí Entry point\n- `app.module.ts` ‚Üí Root module\n\n```ts\n@NgModule({\n  declarations: [...],\n  imports: [...],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```",
        "image": "assets/images/angular-structure.png",
        "interviewQuestions": [
          {
            "question": "What is the role of main.ts in Angular?",
            "answer": "It bootstraps the root module to launch the app.",
            "showAnswer": false
          },
          {
            "question": "What does AppModule contain?",
            "answer": "It declares, imports and bootstraps the app component tree.",
            "showAnswer": false
          }
        ],
        "challenge": "Create a new component and add it to AppModule.",
        "quiz": [
          {
            "question": "What file contains the root module?",
            "options": [
              "app.component.ts",
              "main.ts",
              "app.module.ts"
            ],
            "answer": "app.module.ts"
          }
        ]
      }
    ]
  }
]