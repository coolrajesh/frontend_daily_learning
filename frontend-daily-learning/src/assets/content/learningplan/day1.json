{
    "sections": [
      {
        "title": "JavaScript",
        "topic": "Variable Declarations (var, let, const)",
        "solution": "### Variable Declarations in JavaScript\n\nJavaScript offers three keywords to declare variables: `var`, `let`, and `const`.\n\n#### 1. `var`\n- **Function-scoped**\n- Can be redeclared\n- Hoisted with `undefined`\n\n```js\nconsole.log(x); // undefined\nvar x = 10;\n```\n\n#### 2. `let`\n- **Block-scoped**\n- Cannot be redeclared in the same scope\n- Hoisted but in Temporal Dead Zone\n\n```js\nlet x = 5;\nif (true) {\n  let x = 10;\n  console.log(x); // 10\n}\nconsole.log(x); // 5\n```\n\n#### 3. `const`\n- **Block-scoped**\n- Must be initialized during declaration\n- Cannot be reassigned (but mutable if object/array)\n\n```js\nconst user = { name: 'Raj' };\nuser.name = 'Roy';\n```\n\n#### Summary Table\n| Feature      | var     | let     | const   |\n|--------------|---------|---------|---------|\n| Scope        | Function| Block   | Block   |\n| Hoisted      | Yes     | Yes     | Yes     |\n| Reassignable | Yes     | Yes     | No      |\n| Redeclarable | Yes     | No      | No      |"
      },
      {
        "title": "Angular",
        "topic": "Angular Project Structure Overview",
        "solution": "### Angular Project Structure\n\nWhen you scaffold an Angular app, here’s what you get:\n\n```\nsrc/\n├── app/\n│   ├── components/\n│   ├── services/\n│   ├── app.component.ts\n│   └── app.module.ts\n├── assets/\n├── environments/\n├── index.html\n├── main.ts\n```\n\n#### Key Concepts\n- **Components**: UI building blocks\n- **Services**: Business logic, reusable code\n- **Modules**: Organize features, enable lazy loading\n\n#### Best Practices\n- Use **standalone components** for isolation\n- Group files by **feature module** not type\n- Follow naming conventions like `*.component.ts`, `*.service.ts`"
      },
      {
        "title": "TypeScript",
        "topic": "Intro to TypeScript",
        "solution": "### What is TypeScript?\n\nTypeScript is a statically typed superset of JavaScript.\n\n#### Benefits:\n- Compile-time type checking\n- Better tooling (IntelliSense)\n- Interfaces, generics, enums\n\n```ts\nfunction greet(name: string): string {\n  return `Hello, ${name}`;\n}\n```\n\n#### Example Use Case\n```ts\ninterface User {\n  id: number;\n  name: string;\n}\n\nconst user: User = {\n  id: 1,\n  name: 'Rajesh'\n};\n```"
      },
      {
        "title": "Frontend Architecture",
        "topic": "What is Frontend Architecture? Goals and Responsibilities",
        "solution": "### Frontend Architecture\n\nA well-designed architecture ensures scalability, performance, and maintainability.\n\n#### Goals\n- Separate concerns (UI, logic, state)\n- Improve testing and reusability\n- Enable collaboration and onboarding\n\n#### Responsibilities\n- **Component Design** (e.g., smart vs dumb components)\n- **State Management** (RxJS, NgRx, services)\n- **Routing & Lazy Loading**\n- **Code Splitting**\n- **Testing & CI/CD Setup**"
      }
    ]
  }
  